#Использовать 1connector
#Использовать json
// #Использовать "."
#Использовать cmdline

Перем Репозиторий; // путь на диске к обрабатываемому репозиторию
Перем UrlSQ; // Путь к сонару
Перем IdProjectSQ; // ид проекта сонара
Перем НазваниеЧекЛиста;

Перем Kaiten_Name; //Kaiten_Name
Перем Kaiten_Board_ID; //Kaiten_Board_ID
Перем Kaiten_token; //Kaiten_token
Перем Методы;

Функция ПолучитьНастройкиИзФайла(Знач ПутьКФайлуJSON)

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
	СтрокаJSON = ЧтениеТекста.Прочитать();

	ПарсерJSON = Новый ПарсерJSON();
	Параметры = ПарсерJSON.ПрочитатьJSON(СтрокаJSON);

	Возврат Параметры;

КонецФункции

Функция ПолучитьНастройки(Параметры)

	Настройки = Новый Структура();
		
	Если Параметры["--config"] = Неопределено Тогда

		Настройки.Вставить("Репозиторий", 		Параметры["--repa"]);
		Настройки.Вставить("CommitNumber", 		Параметры["--CommitNumber"]);
		Настройки.Вставить("UrlSQ", 			Параметры["--UrlSQ"]);
		Настройки.Вставить("IdProjectSQ",		Параметры["--IdProjectSQ"]);
		Настройки.Вставить("Kaiten_Name", 		Параметры["--Kaiten_Name"]);
		Настройки.Вставить("Kaiten_Board_ID", 	Параметры["--Kaiten_Board_ID"]);		
		Настройки.Вставить("Kaiten_token", 		Параметры["--Kaiten_token"]);
	
	Иначе
	
		Настройки = ПолучитьНастройкиИзФайла(Параметры["--config"]);
	
	КонецЕсли;

	Для Каждого Строка Из Параметры Цикл
		Настройки.Вставить(Строка.Ключ, Строка.Значение);
	КонецЦикла;

	МассивКомментариев = Параметры["--comment"];
	Если МассивКомментариев <> Неопределено Тогда
		Настройки.Вставить("МассивКомментариев",	СтрРазделить(МассивКомментариев, ","));
	КонецЕсли;
	
	Возврат Настройки;

КонецФункции

Функция ИницилизацияПеременных(АргументыКоманднойСтроки)  Экспорт
	
	Сообщить("Инициализация переменных...");

	 НазваниеЧекЛиста									= "Code review";
	 Методы												= Новый ОбщиеМетоды();

	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--config", 			"Путь к файлу настроек");
	Парсер.ДобавитьИменованныйПараметр("--repa", 			"Репозиторий");
	Парсер.ДобавитьИменованныйПараметр("--CommitNumber", 	"ПутьКХранениюКоличестваРанееОбработанныхКоммитов");
	Парсер.ДобавитьИменованныйПараметр("--UrlSQ", 			"Путь к SonarQube");
	Парсер.ДобавитьИменованныйПараметр("--IdProjectSQ", 	"ID Проекта SQ");
	Парсер.ДобавитьИменованныйПараметр("--Kaiten_Name", 	"имя пространства кайтена");
	Парсер.ДобавитьИменованныйПараметр("--Kaiten_Board_ID", "ID доски кайтена");
	Парсер.ДобавитьИменованныйПараметр("--Kaiten_token", 	"Токен кайтена");	
	Парсер.ДобавитьИменованныйПараметр("--comment", 		"Массив слов для поиска измененных файлов по коммиту");

	Парсер.ДобавитьПараметр("ХешКоммита");
	Парсер.ДобавитьПараметр("urlCard");
	
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если Параметры.Получить("--config") = Неопределено Тогда
		Параметры.Вставить("--config", "config.json");
	КонецЕсли;
	
	Настройки = ПолучитьНастройки(Параметры);
	Репозиторий											= Настройки.Получить("Репозиторий");
	ПутьКХранениюКоличестваРанееОбработанныхКоммитов 	= Настройки.Получить("CommitNumber");
	UrlSQ												= Настройки.Получить("UrlSQ");
	IdProjectSQ											= Настройки.Получить("IdProjectSQ");	
	Kaiten_Name											= Настройки.Получить("Kaiten_Name");
	Kaiten_Board_ID										= Настройки.Получить("Kaiten_Board_ID");
	Kaiten_token										= Настройки.Получить("Kaiten_token");

	МассивНеобязательныхПараметров = Новый Массив();
	МассивНеобязательныхПараметров.Добавить("ХешКоммита");
	МассивНеобязательныхПараметров.Добавить("urlCard");
	МассивНеобязательныхПараметров.Добавить("МассивКомментариев");
	МассивНеобязательныхПараметров.Добавить("--comment");
	
	ФлагВызватьИсключение	= Ложь;
	Для Каждого Строка Из Настройки Цикл
		Если МассивНеобязательныхПараметров.Найти(Строка.Ключ) <> Неопределено Тогда
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Значение) Тогда
			Сообщить("Не задан параметр командной строки " + Строка.Ключ);
			ФлагВызватьИсключение = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ФлагВызватьИсключение Тогда
		ВызватьИсключение("Не все параметры заданы");
	КонецЕсли;

	Сообщить("Инициализация переменных завершена");

	Возврат Настройки;

КонецФункции

Функция ПоследнийОбработанныйКоммит(ПутьКХранениюКоличестваРанееОбработанныхКоммитов)  Экспорт
	ПоследнийКоммит = ПрочитатьФайл(ПутьКХранениюКоличестваРанееОбработанныхКоммитов);
	Если Не ЗначениеЗаполнено(ПоследнийКоммит) Тогда
		ПоследнийКоммит = 4460; //чтобы не сначала хранилища, а с текущего номера версии истории хранилища
	КонецЕсли;
	Возврат ПоследнийКоммит;
КонецФункции

Функция ПолучитьИзГит(СтрокаЗапроса, ИмяФайлаВывода = Неопределено)
		
	Возврат Методы.ВыполнитьВнешнююКоманду(СтрокаЗапроса, Репозиторий, ИмяФайлаВывода);

КонецФункции

Функция ВсегоКоммитов() Экспорт
	
	//git rev-list --all --count

	Возврат ПолучитьИзГит("git rev-list --all --count");
		
КонецФункции
Функция ПрочитатьФайл(ИмяФайла, КодировкаТекста = Неопределено)
	
	cmd = Новый ОбщиеМетоды();
	Возврат Методы.ПрочитатьФайл(ИмяФайла, КодировкаТекста); 

КонецФункции

Функция ОбработатьНовыеКоммиты(КоличествоКоммитов) Экспорт
	
	Успех = Истина;

	Сообщить("Запись необработанных коммитов в файл...");
	Текст = ЗаписатьНеобработанныеКоммитыВФайл(КоличествоКоммитов);
	Сообщить("Запись необработанных коммитов в файл завершена");
	Сообщить("Получение коммитов по шаблону...");
	КоммитыМассивом = ПривестиКоммитыКШаблонуЗадачаСписокФайлов(Текст);
	Сообщить("Получение коммитов по шаблону завершено");
	КоличествоВМассиве = КоммитыМассивом.Количество();
	Сообщить("Получено коммитов в массиве - " + КоличествоВМассиве);
	Если КоличествоВМассиве = 0 Тогда
		Успех = Ложь;
		Возврат Успех;
	КонецЕсли;
	
	Сообщить("Обработка коммитов...");
	Для Каждого Строка Из КоммитыМассивом Цикл

		ИменаИзменныхВКоммитеФайлов = ИменаИзменныхВКоммитеФайлов(Строка.ХешКоммита);
		Сообщить("" + Строка.ХешКоммита + ": Измененных файлов - " + ИменаИзменныхВКоммитеФайлов.Количество());
		Если ИменаИзменныхВКоммитеФайлов.Количество() = 0 Тогда
			Сообщить("" + Строка.ХешКоммита + ": обработка коммита пропущена, нет изменных файлов");
			Продолжить;
		КонецЕсли;
		
		СтрокиСонара = СтрокиСонара(ИменаИзменныхВКоммитеФайлов, Строка.Автор);
		Сообщить("" + Строка.ХешКоммита + ": Получено строк SQ - " + СтрокиСонара.Количество());
		Если СтрокиСонара.Количество() = 0 Тогда
			Сообщить("" + Строка.ХешКоммита + ": обработка коммита пропущена, нет строк SQ");
			Продолжить;
		КонецЕсли;

		РезультатОтправки = ОтправитьЧекЛистОшибокВКарточку(Строка.ХешКоммита, Строка.urlЗадачи, СтрокиСонара);
		Если РезультатОтправки = Ложь Тогда
			Сообщить("" + Строка.ХешКоммита + ": обработка коммита завершена, отправка чек листа - ОШИБКА");
		Иначе
			Сообщить("" + Строка.ХешКоммита + ": обработка коммита завершена, отправка чек листа - УСПЕХ");
		КонецЕсли;

	КонецЦикла;

	Возврат Успех;

КонецФункции

Функция СтрокиСонара(ИменаФайлов, Автор) Экспорт
	
	СтрокиСонара = Новый Массив();
	// Если ЗначениеЗаполнено(ИменаФайлов) Тогда		
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		
		СтрокаСонара = СтрокаСонара(ИмяФайла, Автор);
		
		Если ЗначениеЗаполнено(СтрокаСонара) Тогда
			СтрокиСонара.Добавить(СтрокаСонара);
		КонецЕсли;

	КонецЦикла;
	// КонецЕсли;	

	Возврат СтрокиСонара;

КонецФункции

Функция ИменаИзменныхВКоммитеФайлов(ХешКоммита) Экспорт
	
	// git diff-tree --no-commit-id --name-only -r <sha1-commit-hash>
	
	Если Не ЗначениеЗаполнено(ХешКоммита) Тогда
		Возврат Новый Массив();
	КонецЕсли;
		
	ИменаФайловСтрокой = ПолучитьИзГит("git diff-tree --no-commit-id --name-only -r " + ХешКоммита);

	ИменаФайловМассивом = СтрРазделить(ИменаФайловСтрокой, Символы.ПС);

	Возврат ИменаФайловМассивом;
	
КонецФункции

Функция СтрокаСонара(ИмяФайла, Автор)
		
	ИмяФайлаПоСтандартамСонарКуба   = Методы.ИмяФайлаПоСтандартамСонарКуба(ИмяФайла, Репозиторий);
	Расширение 						= Расширение(ИмяФайлаПоСтандартамСонарКуба);

	Если Расширение = "bsl" Тогда

		// имеем на входе src/cf/Catalogs/РТ_ВариантыПривлеченияФинансирования/Forms/ФормаЭлемента/Ext/Form/Module.bsl
				
		Отборы = Новый Массив();
		Отборы.Добавить("");
		Отборы.Добавить(IdProjectSQ);
		Отборы.Добавить("resolved=false");
		Отборы.Добавить("branch=dev");
		
		Если ЗначениеЗаполнено(Автор) Тогда
			Отборы.Добавить("author="+Автор);
		КонецЕсли;
		
		СтрокаОтбора					= СтрСоединить(Отборы, "&");
		СинонимФайла 					= СинонимФайла(ИмяФайлаПоСтандартамСонарКуба) + " "+ Автор;		

		СтрокаСонара = СтрШаблон(НСтр("ru = '[%4](%1%2%3)'"),
			UrlSQ,
			ИмяФайлаПоСтандартамСонарКуба,			
			СтрокаОтбора,
			СинонимФайла);

		Возврат СтрокаСонара;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция СинонимФайла(ИмяФайла)
	
	Слова = СтрРазделить(ИмяФайла, "/");
	Если Слова.Количество() > 8 Тогда
		Возврат "" + Слова[2] + "." + Слова[3] + "." + Слова[5];
	ИначеЕсли Слова.Количество() > 4 Тогда
		Возврат "" + Слова[2] + "." + Слова[3];	
	Иначе
		Возврат "Без имени";
	КонецЕсли;
	
	Возврат "Без имени";

КонецФункции

Функция Расширение(ИмяФайла)
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".");

	Если ПозицияТочки = 0 Тогда 
		Возврат "";
	КонецЕсли;

	Возврат Сред(ИмяФайла, ПозицияТочки + 1);

КонецФункции

Функция НайтиКоммитыСЗаданнымКомментарием(Комментарий) Экспорт
	
	// git log --pretty=format:'%H%n%B' -n 2 --grep 
	СтрокаЗапроса	= "git log --pretty=format:'%H%n%ae%n%B' --grep """	+	СокрЛП(Комментарий) + """";
	Возврат ПолучитьИзГит(СтрокаЗапроса);
	
КонецФункции

Функция ЗаписатьНеобработанныеКоммитыВФайл(КоличествоКоммитов)
	
	// git log --pretty=format:'%H%n%B' -n 2
	СтрокаЗапроса	= "git log --pretty=format:'%H%n%ae%n%B' -n "+	формат(КоличествоКоммитов,"ЧГ=0");
	Возврат ПолучитьИзГит(СтрокаЗапроса);
	
КонецФункции

Функция ПривестиКоммитыКШаблонуЗадачаСписокФайлов(текст) Экспорт

	КоммитыПоСтрока = СтрРазделить(текст, "'");
	КоммитыМассивом	= Новый Массив;
	
	Для Каждого Строка Из КоммитыПоСтрока Цикл
		
		Если СтрЧислоСтрок(Строка) >2 Тогда
			ХешКоммита		= СтрПолучитьСтроку(Строка, 1);
			Автор			= СтрПолучитьСтроку(Строка, 2);			
			СсылкаНаКарточку= СсылкаНаКарточку(Строка);			
			ОписаниеКоммита = Новый Структура("ХешКоммита, urlЗадачи, Автор", ХешКоммита, СсылкаНаКарточку, Автор);
			КоммитыМассивом.Добавить(ОписаниеКоммита);

		КонецЕсли;
		
	КонецЦикла;
		
	Возврат КоммитыМассивом;
КонецФункции

Функция СсылкаНаКарточку(Знач Текст)
	
	// https://is1c.ru/about/pc/article/regulyarnye-vyrazheniya-v-1s/	
	RegExp	= Новый COMОбъект("VBScript.RegExp");	

	RegExp.Global 	= Ложь; //свойство типа булево, которое позволяет нам проверять строку 
		//до первого соответствия шаблону (Ложь) или по всему тексту (Истина);

	RegExp.IgnoreCase = Истина; // свойство типа булево, которое позволяет нам учитывать (Ложь) 
		//или не учитывать (Истина) регистр символов;

	RegExp.Multiline =  Истина; //свойство типа булево, которое позволяет нам работать 
		//в многострочный (Истина) или однострочный (Ложь) режим;

	СсылкаНаКарточку = КороткаяСсылка(RegExp, "https://\w+.kaiten.ru/\d+", Текст); // https://name.kaiten.ru/1985343430

	Если СсылкаНаКарточку = Неопределено Тогда
		СсылкаНаКарточку = КороткаяСсылка(RegExp, "https://\w+.kaiten.ru/space/\d+/card/\d+", Текст); // https://name.kaiten.ru/space/163416/card/18433777
	КонецЕсли;

	Возврат СсылкаНаКарточку

КонецФункции

Функция КороткаяСсылка(RegExp, Pattern, Текст)
	
	RegExp.Pattern 	= Pattern; //	строка используемая как шаблон регулярного выражения. 
		//Чаще всего, говоря о регулярном выражении, люди имеют ввиду именно шаблон.;

	НайденнаяСтрока = RegExp.Execute(Текст);
		
	Если НайденнаяСтрока.Count > 0  Тогда
		Возврат НайденнаяСтрока.Item(0).Value;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура УстановитьПоследнийОбработанныйКоммит(ПутьКХранениюКоличестваРанееОбработанныхКоммитов, Количество)	Экспорт
	
	Текст = Новый ТекстовыйДокумент();	
	Текст.ДобавитьСтроку(Количество);
	Текст.Записать(ПутьКХранениюКоличестваРанееОбработанныхКоммитов, КодировкаТекста.Системная);	

КонецПроцедуры

Функция	card_id(urlCard)

	Слова = СтрРазделить(urlCard, "/");

	Если Слова.Количество() < 4 Тогда
		возврат 0;
	КонецЕсли;

	ПолноеИмяПространстваКайтена	= "" + Kaiten_Name + ".kaiten.ru";
	Если НРег(Слова[2]) <> ПолноеИмяПространстваКайтена Тогда
		возврат 0;
	КонецЕсли;


	Возврат СокрЛП(Слова[Слова.Вграница()]);

КонецФункции

Функция РазработчикКарточки(Card)  Экспорт

	ДопСвойства = Card.Получить("properties");
	Если Не ЗначениеЗаполнено(ДопСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИдРазработчиков = ДопСвойства.Получить("id_215215"); // Разработчик

	Если ИдРазработчиков = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(ИдРазработчиков) = Тип("Массив") И 
		ИдРазработчиков.Количество()>0 Тогда		
		ИдРазработчика = ИдРазработчиков[0];
		Если ТипЗнч(ИдРазработчика) = Тип("Соответствие") Тогда
			ИдРазработчика = ИдРазработчиков[0].Получить("id");
		КонецЕсли;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

	Если ИдРазработчика = Неопределено Тогда
		Возврат Неопределено; 
	КонецЕсли;

	Возврат ПочтаРазработчика(Card, ИдРазработчика);

КонецФункции

Функция ПочтаРазработчика(Card, ИдРазработчика) Экспорт

	Участники = Card.Получить("members"); 

	Если Участники = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Для Каждого Участник Из Участники Цикл
		Если Участник.получить("uid") = ИдРазработчика Тогда
			Возврат Участник.получить("email");
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция КарточкаКайтен(urlCard) Экспорт

	Если Не ЗначениеЗаполнено(urlCard) Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	card_id  = card_id(urlCard);

	Если Не ЗначениеЗаполнено(card_id) Тогда
		Возврат Ложь; 
	КонецЕсли;

	getCard  		= СтрШаблон("https://%1.kaiten.ru/api/latest/cards/%2", Kaiten_Name, card_id);	
	КарточкаКайтен 	= ОтправитьЗапросВКайтен(getCard, "Get");

	Возврат КарточкаКайтен;

КонецФункции

Функция ОтправитьЧекЛистОшибокВКарточку(ХешКоммита, СсылкаНаКарточкуКайтен, ДобавляемыеСтроки) Экспорт

	// Если ДобавляемыеСтроки.Количество() = 0 Тогда
	// 	Возврат Истина;
	// КонецЕсли;
	Результат = Ложь;

	Если Не ЗначениеЗаполнено(СсылкаНаКарточкуКайтен) Тогда
		Сообщить("" + ХешКоммита + ": обработка коммита пропущена, нет ссылки на карточку Кайтен");
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаКарточкуКайтен) = Тип("Строка") Тогда		
		КарточкаКайтен	= КарточкаКайтен(СсылкаНаКарточкуКайтен);
	Иначе
		КарточкаКайтен = СсылкаНаКарточкуКайтен;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КарточкаКайтен) Тогда
		Сообщить("" + ХешКоммита + ": обработка коммита пропущена, не получены данные карточки Кайтен");
		Возврат Результат;
	КонецЕсли;

	card_id	 = КарточкаКайтен.Получить("id");
	
	Если card_id = Неопределено Тогда
		Сообщить("" + ХешКоммита + ": обработка коммита пропущена, не получен id карточки Кайтен");
		Возврат Результат;
	КонецЕсли;
	
	Сообщить("" + ХешКоммита + ": получены данные карточки Кайтен, id - " + card_id);
	
	ИдЧекЛиста = Неопределено;
	ЧекЛисты   = КарточкаКайтен.Получить("checklists");
	ЧекЛист    = Неопределено;
	Если ЧекЛисты <> Неопределено Тогда
		Сообщить("" + ХешКоммита + ": обработка существующих чек листов");
		Для Каждого Строка Из ЧекЛисты Цикл
			Если Строка.Получить("name") = НазваниеЧекЛиста Тогда
				ИдЧекЛиста	= Строка.Получить("id");
				ЧекЛист		= Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Попытка
		
		Если ИдЧекЛиста = Неопределено Тогда
			Сообщить("" + ХешКоммита + ": создание чек листа");
			ИдЧекЛиста = СоздатьЧекЛист(card_id);
			НовыеДобавляемыеСтроки	= ДобавляемыеСтроки;
		Иначе
			Сообщить("" + ХешКоммита + ": обработка чек листа");
			НовыеДобавляемыеСтроки	= НовыеДобавляемыеСтроки(ЧекЛист, ДобавляемыеСтроки, card_id, ИдЧекЛиста);
		КонецЕсли;

	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить("" + ХешКоммита + ": не удалось создать/обработать чек лист: " + ТекстОшибки);
		Возврат Результат;
	КонецПопытки;

	Попытка
		Сообщить("" + ХешКоммита + ": создание пунктов чек листа");
		СоздатьПунктыЧекЛиста(card_id, ИдЧекЛиста, НовыеДобавляемыеСтроки);
		Результат = Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить("" + ХешКоммита + ": не удалось создать пункты чек листа: " + ТекстОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция НовыеДобавляемыеСтроки(ЧекЛист, ДобавляемыеСтроки, card_id, ИдЧекЛиста)

	НовыеДобавляемыеСтроки = Новый Массив();
	ПунктыЧекЛиста	= ЧекЛист.получить("items");
	Для Каждого СтрокаСонара Из ДобавляемыеСтроки Цикл
		ФлагНужноДобавитьСтроку = Истина;
		
		Если ПунктыЧекЛиста <> Неопределено Тогда
			Для Каждого Строка Из ПунктыЧекЛиста Цикл
				
				КриваяСтрокаСонара = СтрЗаменить(СтрокаСонара, "author", "authors");

				Если Строка.Получить("text") = КриваяСтрокаСонара
					Или Строка.Получить("text") = СтрокаСонара Тогда
					
					ФлагНужноДобавитьСтроку = Ложь;

					ОтметитьПунктЧекЛистаКакНеВыполненный(card_id, ИдЧекЛиста, Строка.Получить("id"), Строка);

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ФлагНужноДобавитьСтроку Тогда
			НовыеДобавляемыеСтроки.Добавить(СтрокаСонара);
		КонецЕсли;

	КонецЦикла;	

	Возврат НовыеДобавляемыеСтроки;

КонецФункции

Функция ОтправитьЗапросВКайтен(url, ТипЗапроса, ПараметрыЗапроса = Неопределено)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	ПараметрыЗапроса.Вставить("board_id", 	Kaiten_Board_ID);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", 	"application/json");
	Заголовки.Вставить("Accept", 		"application/json");
	Заголовки.Вставить("Authorization", "Bearer "+Kaiten_token);
		
	Попытка
		Если ТипЗапроса = "Get" Тогда
			Ответ = КоннекторHTTP.Get(url, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "Post" Тогда	
			Ответ = КоннекторHTTP.Post(url, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "Patch" Тогда	
			Ответ = КоннекторHTTP.Patch(url, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ОтметитьПунктЧекЛистаКакНеВыполненный(card_id, checklist_id, items_id, ОбновляемаяСтрока)

	//https://name.kaiten.ru/api/latest/cards/{card_id}/checklists/{checklist_id}/items/{id}

	UpdateChecklist  = СтрШаблон("https://%1.kaiten.ru/api/latest/cards/%2/checklists/%3/items/%4",
		Kaiten_Name, "" + card_id, "" + checklist_id, items_id);

	ОписаниеСтроки = Новый Структура;
	ОписаниеСтроки.Вставить("text", 		ОбновляемаяСтрока.Получить("text"));
	ОписаниеСтроки.Вставить("sort_order", 	ОбновляемаяСтрока.Получить("sort_order"));
	ОписаниеСтроки.Вставить("checklist_id", ОбновляемаяСтрока.Получить("checklist_id"));
	ОписаниеСтроки.Вставить("checked", 		false);	
		
	Ответ = ОтправитьЗапросВКайтен(UpdateChecklist, "Patch", ОписаниеСтроки);	
	
	Возврат Ответ;
КонецФункции

Функция СоздатьПунктыЧекЛиста(card_id, checklist_id, ДобавляемыеСтроки)

	//https://name.kaiten.ru/api/latest/cards/{card_id}/checklists/{checklist_id}/items

	AddChecklist  = СтрШаблон("https://%1.kaiten.ru/api/latest/cards/%2/checklists/%3/items",
		Kaiten_Name, "" + card_id, "" + checklist_id);

	Для Каждого Строка Из ДобавляемыеСтроки Цикл
		ОписаниеСтроки = Новый Структура;
		ОписаниеСтроки.Вставить("text", Строка);		
		
		Ответ = ОтправитьЗапросВКайтен(AddChecklist, "Post", ОписаниеСтроки);
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция СоздатьЧекЛист(card_id)

	//https://example.kaiten.ru/api/latest/cards/{card_id}/checklists

	МассивСтрок	= Новый Массив();

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("name", НазваниеЧекЛиста);
	ПараметрыЗапроса.Вставить("sort_order", 1);	
	ПараметрыЗапроса.Вставить("exclude_item_ids", МассивСтрок);
		
	AddChecklist  = СтрШаблон("https://%1.kaiten.ru/api/latest/cards/%2/checklists", 
		Kaiten_Name, "" + card_id);
	Ответ 	= ОтправитьЗапросВКайтен(AddChecklist, "Post", ПараметрыЗапроса);
	id 		= Ответ.Получить("id");
	Возврат id; 

КонецФункции
	
Функция СписокФайловПоЗадаче(ИдентификаторЗадачи) Экспорт
	
	Возврат Методы.СписокФайловПоЗадаче(ИдентификаторЗадачи, Репозиторий);

КонецФункции

Функция ОписаниеЗадачи(КарточкаКайтен) Экспорт

	Если Не ЗначениеЗаполнено(КарточкаКайтен) Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеЗадачи = КарточкаКайтен.Получить("description");

	Если Не ЗначениеЗаполнено(ОписаниеЗадачи) Тогда
		Возврат "";
	КонецЕсли;

	Возврат ОписаниеЗадачи;

КонецФункции

Функция КлючевоеСловоПоЗадаче(Знач ОписаниеЗадачи) Экспорт
	
	ОписаниеЗадачиПоСтрочно 	= СтрРазделить(ОписаниеЗадачи, Символы.ПС);
	СимволыПоиска				= "?ref=";	
	Для Каждого Строка Из ОписаниеЗадачиПоСтрочно Цикл	
		
		НайденныйСимвол	= СтрНайти(Строка, СимволыПоиска);
			
		Если НайденныйСимвол = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДлинаГУИДа			= 32;
		ДлинаСимволовПоиска	= СтрДлина(СимволыПоиска);
		КлючевоеСлово 		= Сред(Строка, НайденныйСимвол + ДлинаСимволовПоиска, ДлинаГУИДа);		

		Если СтрДлина(СокрЛП(КлючевоеСлово)) = ДлинаГУИДа Тогда
			Возврат КлючевоеСлово;
		Иначе
			Возврат "";
		КонецЕсли;

	КонецЦикла;
	
	Возврат "";

КонецФункции

Функция СписокКарточекПоКолонке(Колонка) Экспорт

	//https://name.kaiten.ru/api/latest/cards

	НовыйСписокКарточек = Новый Массив;
	Если Не ЗначениеЗаполнено(Колонка) Тогда
		Возврат НовыйСписокКарточек;
	КонецЕсли;

	url		= СтрШаблон("https://%1.kaiten.ru/api/latest/cards", Kaiten_Name);
	Отбор	= Новый Структура;
	Отбор.Вставить("column_id", Колонка);
	СписокКарточекПоКолонке = ОтправитьЗапросВКайтен(url, "Get", Отбор);
	
	Для Каждого Карточка Из СписокКарточекПоКолонке Цикл
		Если Карточка.Получить("archived") = Истина Тогда
			Продолжить;
		Иначе
			НовыйСписокКарточек.Добавить(Карточка);
		КонецЕсли;
	КонецЦикла;

	Возврат НовыйСписокКарточек;

КонецФункции

Функция ОбновитьКарточкуКайтен(КарточкаКайтен) Экспорт

	// https://name.kaiten.ru/api/latest/cards/%1
	Если Не ЗначениеЗаполнено(КарточкаКайтен) Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	card_id 	= КарточкаКайтен.Получить("id");
	UpdateUrl	= СтрШаблон("https://%1.kaiten.ru/api/latest/cards/%2", Kaiten_Name, card_id);
	ОтправитьЗапросВКайтен(UpdateUrl, "Patch", КарточкаКайтен);	

	Возврат Истина;

КонецФункции

Процедура ПолучитьПоследниеКоммитыИзГитаИОтправитьВКайтенСтрокиСонара(ПутьКХранениюКоличестваРанееОбработанныхКоммитов) Экспорт

	ВсегоКоммитов				= ВсегоКоммитов();
	ПоследнийОбработанныйКоммит = ПоследнийОбработанныйКоммит(ПутьКХранениюКоличестваРанееОбработанныхКоммитов);
	ТребуетсяОбработатьКоммитов = ВсегоКоммитов - ПоследнийОбработанныйКоммит;
	Если ОбработатьНовыеКоммиты(ТребуетсяОбработатьКоммитов) Тогда
		УстановитьПоследнийОбработанныйКоммит(ПутьКХранениюКоличестваРанееОбработанныхКоммитов, ВсегоКоммитов);	
	КонецЕсли;	
	
КонецПроцедуры