Функция ВыполнитьВнешнююКоманду(СтрокаЗапроса, РабочаяПапка, ИмяФайлаВывода = Неопределено) Экспорт
	
	ИмяВременногоФайла = Неопределено;
	Если ИмяФайлаВывода = Неопределено Тогда
		ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаВывода		= ИмяВременногоФайла;
	КонецЕсли;

	КодВозврата = -1;
	ЗапуститьПриложение("cmd /C " + СтрокаЗапроса + " > " + ИмяФайлаВывода, РабочаяПапка, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		Сообщить("Ошибка получения " + СтрокаЗапроса);
		Сообщить(ПрочитатьФайл(ИмяФайлаВывода));
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ПрочитатьФайл(ИмяФайлаВывода);

	Если ИмяВременногоФайла <> Неопределено Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВыполнитьНесколькоКоманд(КоманднаяСтрока, РабочаяПапка, Кодировка = Неопределено) Экспорт
	
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоФайла2 = ПолучитьИмяВременногоФайла("bat");

	КоманднаяСтрокаСВыводомВФайл=  "" + КоманднаяСтрока + " > "+ИмяВременногоФайла;
	ТекстовыйДокумент 	= Новый ТекстовыйДокумент();
	ТекстовыйДокумент.ДобавитьСтроку(КоманднаяСтрокаСВыводомВФайл);
	Если Кодировка = Неопределено Тогда
		ТекстовыйДокумент.Записать(ИмяВременногоФайла2, КодировкаТекста.Системная);
	Иначе
		ТекстовыйДокумент.Записать(ИмяВременногоФайла2, Кодировка);
	КонецЕсли;	
		
	КодВозврата = -1;	
	ЗапуститьПриложение(ИмяВременногоФайла2, РабочаяПапка, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		Сообщить("Ошибка получения " + КоманднаяСтрокаСВыводомВФайл);
		Попытка
			Сообщить(ПрочитатьФайл(ИмяВременногоФайла));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		ФайлыСтрокой = ПрочитатьФайл(ИмяВременногоФайла, КодировкаТекста.OEM);
	Иначе
		ФайлыСтрокой = ПрочитатьФайл(ИмяВременногоФайла, Кодировка);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла2);
	
	СписокФайлов = СтрРазделить(ФайлыСтрокой, Символы.ПС);

	Возврат СписокФайлов;

КонецФункции
Функция СписокФайловПоЗадаче(ИдентификаторЗадачи, Репозиторий) Экспорт
		
	КоманднаяСтрока	= СтрШаблон("
	|chcp 866	
	|findstr /s /i /m ""%1"" %2\src\*.bsl", ИдентификаторЗадачи, Репозиторий);

	Возврат ВыполнитьНесколькоКоманд(КоманднаяСтрока, Репозиторий); 

КонецФункции

Функция ПрочитатьФайл(ИмяФайла, Кодировка = Неопределено) Экспорт
	
	Если Кодировка = Неопределено Тогда
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;

	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Текст		= Новый ТекстовыйДокумент();
		Текст.Прочитать(ИмяФайла, Кодировка);
		Содержимое	= Текст.ПолучитьТекст();	
		Возврат Содержимое;
	КонецЕсли;

	Возврат "";

КонецФункции

Функция ИмяФайлаПоСтандартамСонарКуба(Знач ИмяФайла, Репозиторий) Экспорт
	
	ИмяФайла = СтрЗаменить(ИмяФайла, Репозиторий + "\", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");

	Слова = СтрРазделить(ИмяФайла, "/");
	
	Если Слова.Количество() < 1 Тогда 
		Возврат "";
	КонецЕсли;
	
	Если НРег(Слова[0]) = "src" Тогда
		Возврат ИмяФайла; 
	КонецЕсли;

	Слова.Вставить(0, "src");

	ИмяФайлаПоСтандартамСонарКуба	= СтрСоединить(Слова, "/");
	
	Возврат ИмяФайлаПоСтандартамСонарКуба;

КонецФункции

Функция ИмяФайлаПоРедмайна(Знач ИмяФайла, Репозиторий) Экспорт
	
	ИмяФайла = СтрЗаменить(ИмяФайла, Репозиторий + "\", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "src/", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "cf/", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Ext", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "VERSION", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "dumplist.txt", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "ConfigDumpInfo.xml", "");

	Если Найти(ИмяФайла, "Форма.") Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, ".xml", 			"");		
	ИначеЕсли Найти(ИмяФайла, "/Predefined") Тогда		
		ИмяФайла = СтрЗаменить(ИмяФайла, "/Predefined.xml", символы.Таб + "- Изменения в предопределенных данных");
	Иначе
		ИмяФайла = СтрЗаменить(ИмяФайла, ".xml", 			символы.Таб + "- Изменения в объекте конфигурации");
	КонецЕсли;

	ИмяФайла = СтрЗаменить(ИмяФайла, "/Form.xml", 			символы.Таб + "- Изменения на форме");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Module.bsl",	 		"");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/ObjectModule.bsl", 	".МодульОбъекта");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/ManagerModule.bsl", 	".МодульМенеджера");
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "Documents/", 						"$Документ.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "Catalogs/", 						"$Справочник.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "DataProcessors/", 				"$Обработка.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "Reports/", 						"$Отчет.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "DefinedTypes/", 					"$ОпределяемыйТип.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "CommonModules/", 					"$ОбщийМодуль.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "AccumulationRegisters/", 			"$РегистрНакопления.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "InformationRegisters/", 			"$РегистрСведений.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "Roles/", 							"$Роль.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "CommonForms/", 					"$ОбщаяФорма.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "ChartsOfCharacteristicTypes/", 	"$ПланВидовХарактеристик.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "EventSubscriptions/", 			"$ПодпискаНаСобытие.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "FunctionalOptions/", 				"$ФункциональнаяОпция.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "ScheduledJobs/", 					"$РегламентноеЗадание.");
	ИмяФайла = СтрЗаменить(ИмяФайла, "Subsystems/", 					"$Подсистема.");	
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Forms/", 	".Форма.");	
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Templates/", ".Макет.");	

	ИмяФайла = СтрЗаменить(ИмяФайла, "/Rights", 	"");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Form", 		"");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/Template", 	"");
	
	Слова = СтрРазделить(ИмяФайла, "/");

	Если Слова.Количество() < 1 Тогда 
		Возврат "";
	КонецЕсли;
			
	ИмяФайлаПоСтандартамСонарКуба	= СтрСоединить(Слова, "/");
	
	Возврат ИмяФайлаПоСтандартамСонарКуба;

КонецФункции