#Использовать 1connector
#Использовать json
#Использовать cmdline

//Перем Redmine_URL; // URL redmine
//Перем Redmine_APIKEY; // Redmine API key
//Перем kaitenUrl; // URL задачи kaiten
//Перем Redmine_ProjectId; // ID проекта redmine

Функция Инициализировать(Знач АргументыКоманднойСтроки) Экспорт
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--kaitenUrl"	, "URL задачи kaiten");
	Парсер.ДобавитьИменованныйПараметр("--config"		, "Путь к файлу настроек");
	
	ПараметрыКоманднойСтроки = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если ПараметрыКоманднойСтроки.Получить("--config") = Неопределено Тогда
		ПараметрыКоманднойСтроки.Вставить("--config", "redmine_config.json");
	КонецЕсли;
	
	Настройки = ПараметрыСоздания(ПараметрыКоманднойСтроки);
	//kaitenUrl			= Настройки.Получить("kaitenUrl");
	//Redmine_URL			= Настройки.Получить("Redmine_URL");
	//Redmine_APIKEY		= Настройки.Получить("Redmine_APIKEY");
	//Redmine_ProjectId	= Настройки.Получить("Redmine_ProjectId");
	
	Возврат Настройки;
	
КонецФункции

Функция ПараметрыСоздания(Знач ПараметрыКоманднойСтроки)
	
	ПараметрыСоздания = Новый Структура();
	
	Для Каждого Строка Из ПараметрыКоманднойСтроки Цикл
		ПараметрыСоздания.Вставить(Строка.Ключ, Строка.Значение);
	КонецЦикла;
	
	Если ПараметрыКоманднойСтроки["--config"] = Неопределено Тогда
		ВызватьИсключение "Не задан параметр конфигурационного файла";
	Иначе
		НастройкиИзФайла = ПолучитьНастройкиИзФайла(ПараметрыКоманднойСтроки["--config"]);
		ПараметрыСоздания.Вставить("НастройкиИзФайла", НастройкиИзФайла);
	КонецЕсли;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция ПолучитьНастройкиИзФайла(Знач ПутьКФайлуJSON)
	
	Попытка
		ЧтениеТекста	= Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
		СтрокаJSON		= ЧтениеТекста.Прочитать();
		
		ПарсерJSON		= Новый ПарсерJSON();
		Параметры		= ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	Исключение
		Ошибка			= ОписаниеОшибки();
		ВызватьИсключение "Не удалось прочитать настройки из файла:" + Ошибка;
	КонецПопытки;
	
	Возврат Параметры;
	
КонецФункции

Функция ВыполнитьЗапросRedmine(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	ПараметрыЗапроса.Вставить("key", 	Redmine_APIKEY);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ДанныеЗадачиKaiten(Знач kaitenUrl) Экспорт
	
	
	
КонецФункции




// Creating an issue
// POST /issues.[format]
// Parameters:

// issue - A hash of the issue attributes:
	// project_id
	// tracker_id
	// status_id
	// priority_id
	// subject
	// description
	// category_id
	// fixed_version_id - ID of the Target Versions (previously called 'Fixed Version' and still referred to as such in the API)
	// assigned_to_id - ID of the user to assign the issue to (currently no mechanism to assign by name)
	// parent_issue_id - ID of the parent issue
	// custom_fields - See Custom fields
	// watcher_user_ids - Array of user ids to add as watchers (since 2.3.0)
	// is_private - Use true or false to indicate whether the issue is private or not
	// estimated_hours - Number of hours estimated for issue

//Функция СоздатьЗадачуRedmine(ПараметрыСоздания)
//	
//	id = Неопределено;
//
//	// Проверка параметров
//
//	ПараметрыЗапроса = Новый Структура("issue", Новый Структура());
//	ПараметрыЗапроса.issue.Вставить();
//	ПараметрыЗапроса.issue.Вставить();
//	ПараметрыЗапроса.issue.Вставить();
//	ПараметрыЗапроса.issue.Вставить();
//	ПараметрыЗапроса.issue.Вставить();
//
//	RM_Issues_URL = Redmine_URL + "issue.json";
//	Ответ = ВыполнитьЗапросRedmine(RM_Issues_URL, "POST", ПараметрыЗапроса);
//	Проекты = Ответ.Получить("projects");
//
//	Если Проекты = Неопределено Тогда
//		Возврат id;
//	КонецЕсли;
//
//	Для Каждого Проект Из Проекты Цикл
//		currentName = Проект.Получить("name");
//		Если currentName = name Тогда
//			id = Проект.Получить("id");
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//
//	Возврат id;
//	
//КонецФункции