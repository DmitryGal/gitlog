#Использовать 1connector
#Использовать json
#Использовать cmdline

Перем kaitenUrl; // URL задачи kaiten

Перем kaitenToken; // Токен kaiten
Перем kaitenNameSpace; // URL задачи kaiten
Перем kaitenBoardId; // ID доски kaiten
Перем cardId; // ID карточки kaiten
Перем kaitenUsersTable; // Таблица пользователей kaiten
Перем kaitenUsersFields; // Пользовательские поля kaiten

Перем redmineProjectId; // ID проектаredmine
Перем redmineVersionsTable; // Таблица версий redmine

Перем redmineURL; // Redmine URL
Перем redmineAPIKEY; // Redmine API key

Функция Инициализировать(Знач АргументыКоманднойСтроки) Экспорт
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--kaitenUrl"	, "URL задачи kaiten");
	Парсер.ДобавитьИменованныйПараметр("--config"		, "Путь к файлу настроек");
	
	ПараметрыКоманднойСтроки = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если ПараметрыКоманднойСтроки.Получить("--config") = Неопределено Тогда
		ПараметрыКоманднойСтроки.Вставить("--config", "redmine_config.json");
	КонецЕсли;
	
	Настройки = ПараметрыСоздания(ПараметрыКоманднойСтроки);
	
	kaitenUrl = Настройки.kaitenUrl;
	
	НастройкиИзФайла = Настройки.НастройкиИзФайла;
	
	kaitenToken		= НастройкиИзФайла.Получить("kaitenToken");
	kaitenNameSpace	= НастройкиИзФайла.Получить("kaitenNameSpace");
	kaitenBoardId	= НастройкиИзФайла.Получить("kaitenBoardId");
	
	kaitenUsersFields	= НастройкиИзФайла.Получить("kaitenUsersFields");
	
	redmineProjectId	= НастройкиИзФайла.Получить("redmineProjectId");
	redminePriority		= НастройкиИзФайла.Получить("redminePriority");
	
	redmineURL		= НастройкиИзФайла.Получить("redmineURL");
	redmineAPIKEY	= НастройкиИзФайла.Получить("redmineAPIKEY");
	
	Возврат Настройки;
	
КонецФункции

Функция ПараметрыСоздания(Знач ПараметрыКоманднойСтроки)
	
	ПараметрыСоздания = Новый Структура();
	
	kaitenUrl = ПараметрыКоманднойСтроки["--kaitenUrl"];
	Если kaitenUrl = Неопределено Тогда
		ВызватьИсключение "Не задан параметр конфигурационного файла";
	Иначе
		ПараметрыСоздания.Вставить("kaitenUrl", kaitenUrl);
	КонецЕсли;
	
	Если ПараметрыКоманднойСтроки["--config"] = Неопределено Тогда
		ВызватьИсключение "Не задан параметр конфигурационного файла";
	Иначе
		НастройкиИзФайла = ПолучитьНастройкиИзФайла(ПараметрыКоманднойСтроки["--config"]);
		ПараметрыСоздания.Вставить("НастройкиИзФайла", НастройкиИзФайла);
	КонецЕсли;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция ПолучитьНастройкиИзФайла(Знач ПутьКФайлуJSON)
	
	Попытка
		ЧтениеТекста	= Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
		СтрокаJSON		= ЧтениеТекста.Прочитать();
		ПарсерJSON		= Новый ПарсерJSON();
		Параметры		= ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	Исключение
		Ошибка			= ОписаниеОшибки();
		ВызватьИсключение "Не удалось прочитать настройки из файла:" + Ошибка;
	КонецПопытки;
	
	Возврат Параметры;
	
КонецФункции

Функция kaitenCardId()
	
	urlData			 = КоннекторHTTP.РазобратьURL(kaitenUrl);
	ПутьНаСервере	 = urlData.Путь;
	МассивЧастейПути = СтрРазделить(ПутьНаСервере, "/", Ложь);
	cardId			 = МассивЧастейПути[МассивЧастейПути.ВГраница()];
	
	Возврат cardId;
	
КонецФункции

Функция ДанныеЗадачиKaiten() Экспорт
	
	ПараметрыЗапроса = Новый Структура();	
	ПараметрыЗапроса.Вставить("board_id", kaitenBoardId);
	
	// Предварительно получим список пользователей
	urlЗапроса			= "https://ekk2.kaiten.ru/api/latest/users";
	ДанныеПользователей	= ОтправитьЗапросВKaiten(urlЗапроса, "GET", ПараметрыЗапроса);
	kaitenUsersTable	= СформироватьТаблицуПользователей(ДанныеПользователей);
	redmineVersionsTable = СформироватьТаблицуВерсий();
	
	ШаблонЗапроса	= "https://%1.kaiten.ru/api/latest/cards/%2";
	cardId			= kaitenCardId();
	urlЗапроса		= СтрШаблон(ШаблонЗапроса, kaitenNameSpace, cardId);
	
	ДанныеЗадачи	= ОтправитьЗапросВKaiten(urlЗапроса, "GET", ПараметрыЗапроса);
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Процедура ДополнитьДанныеЗадачиKaiten(ДанныеЗадачи) Экспорт
	
	ПользовательскиеПоля = ДанныеЗадачи.Получить("properties");
	Если ПользовательскиеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКлючейПользователей = Новый Массив();
	МассивКлючейПользователей.Добавить("Разработчик");
	МассивКлючейПользователей.Добавить("Аналитик");
	
	МассивКлючейВерсий = Новый Массив();
	МассивКлючейВерсий.Добавить("ПлановыйРелиз");
	МассивКлючейВерсий.Добавить("ФактическийРелиз");
	
	Для Каждого КлючИЗначение Из kaitenUsersFields Цикл
		
		Если МассивКлючейПользователей.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиKaitenПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		ИначеЕсли МассивКлючейВерсий.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиKaitenВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		Иначе
			ПользовательскоеПоле = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
			Если ПользовательскоеПоле <> Неопределено Тогда
				ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ПользовательскоеПоле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиKaitenПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	МассивУИДПользователей = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если МассивУИДПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокПользователей = Новый Массив();
	Для Каждого УИД Из МассивУИДПользователей Цикл
		Отбор = Новый Структура("uid", УИД);
		ИскомыеСтроки = kaitenUsersTable.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда
			МассивСтрокПользователей.Добавить(ИскомыеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокПользователей.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, МассивСтрокПользователей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиKaitenВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	ТекущаяВерсия = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если ТекущаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсия	= "1.1." + ТекущаяВерсия; // Текущий формат ведения в kaiten отличается
	Отбор			= Новый Структура("name", ТекущаяВерсия);
	ИскомыеСтроки	= redmineVersionsTable.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ИскомыеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуПользователей(ДанныеПользователей)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("full_name"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("email"		, Новый ОписаниеТипов("Строка"));
	
	Для Каждого Пользователь Из ДанныеПользователей Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НоваяСтрока[ИмяПоля] = Пользователь.Получить(ИмяПоля);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуВерсий()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"			, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("name"			, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("description"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("status"		, Новый ОписаниеТипов("Строка"));
	
	ШаблонЗапроса	= "https://rm.rtinform.ru/projects/%1/versions.json";
	urlЗапроса		= СтрШаблон(ШаблонЗапроса, redmineProjectId);
	
	Ответ			= ОтправитьЗапросВRedmine(urlЗапроса, "GET");
	МассивВерсий	= Ответ.Получить("versions");
	
	Для Каждого Версия Из МассивВерсий Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НоваяСтрока[ИмяПоля] = Версия.Получить(ИмяПоля);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ОтправитьЗапросВKaiten(url, ТипЗапроса, ПараметрыЗапроса = Неопределено)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	Заголовки.Вставить("Authorization"	, "Bearer " + kaitenToken);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(url, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(url, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(url, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьЗапросВRedmine(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	ПараметрыЗапроса.Вставить("key", 	redmineAPIKEY);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции





// Creating an issue
// POST /issues.[format]
// Parameters:

// issue - A hash of the issue attributes:
	// project_id
	// tracker_id
	// status_id
	// priority_id
	// subject
	// description
	// category_id
	// fixed_version_id - ID of the Target Versions (previously called 'Fixed Version' and still referred to as such in the API)
	// assigned_to_id - ID of the user to assign the issue to (currently no mechanism to assign by name)
	// parent_issue_id - ID of the parent issue
	// custom_fields - See Custom fields
	// watcher_user_ids - Array of user ids to add as watchers (since 2.3.0)
	// is_private - Use true or false to indicate whether the issue is private or not
	// estimated_hours - Number of hours estimated for issue

Функция СформироватьДанныеЗадачи(ДанныеЗадачи)
	
	id = Неопределено;

	// Проверка параметров

	ПараметрыЗапроса = Новый Структура("issue", Новый Структура());
	ПараметрыЗапроса.issue.Вставить("project_id", );
	ПараметрыЗапроса.issue.Вставить();
	ПараметрыЗапроса.issue.Вставить();
	ПараметрыЗапроса.issue.Вставить();
	ПараметрыЗапроса.issue.Вставить();

	RM_Issues_URL = redmineURL + "issue.json";
	Ответ = ОтправитьЗапросВRedmine(RM_Issues_URL, "POST", ПараметрыЗапроса);
	Проекты = Ответ.Получить("projects");
	
КонецФункции