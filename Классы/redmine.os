#Использовать 1connector
#Использовать json
#Использовать cmdline

Перем kaitenUrl; // URL задачи kaiten

Перем kaitenToken; // Токен kaiten
Перем kaitenNameSpace; // URL задачи kaiten
Перем kaitenBoardId; // ID доски kaiten
Перем cardId; // ID карточки kaiten
Перем kaitenUsersTable; // Таблица пользователей kaiten
Перем kaitenUsersFields; // Пользовательские поля kaiten
Перем kaitenTypesId; // Типы карточек kaiten

Перем redmineProjectId; // ID проектаredmine
Перем redmineVersionsTable; // Таблица версий redmine
Перем redmineTrackersId; // Трекеры задач redmine
Перем redminePriority; // Приоритеты задач redmine
Перем redmineStatusId; // ID нового статуса redmine
Перем redmineCategory; // Категории задач redmine
Перем redmineAssignedId; // ID пользователя redmine для назначения задачи
Перем redmineCustomFields; // Пользовательские поля redmine

Перем redmineURL; // Redmine URL
Перем redmineAPIKEY; // Redmine API key

Перем kaitenTypesInRedmineTrackers; // Соответствие типов карточек kaiten с redmine трекерами
Перем kaitenRedmineUsers; // Соответствие пользователей кайтен и редмайн
Перем ТаблицаСоответствияПользователей; // Таблица соответствия пользователей кайтен и редмайн

Функция Инициализировать(Знач АргументыКоманднойСтроки) Экспорт
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--kaitenUrl"	, "URL задачи kaiten");
	Парсер.ДобавитьИменованныйПараметр("--config"		, "Путь к файлу настроек");
	
	ПараметрыКоманднойСтроки = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если ПараметрыКоманднойСтроки.Получить("--config") = Неопределено Тогда
		ПараметрыКоманднойСтроки.Вставить("--config", "redmine_config.json");
	КонецЕсли;
	
	Настройки = ПараметрыСоздания(ПараметрыКоманднойСтроки);
	
	kaitenUrl = Настройки.kaitenUrl;
	
	НастройкиИзФайла = Настройки.НастройкиИзФайла;
	
	kaitenToken		= НастройкиИзФайла.Получить("kaitenToken");
	kaitenNameSpace	= НастройкиИзФайла.Получить("kaitenNameSpace");
	kaitenBoardId	= НастройкиИзФайла.Получить("kaitenBoardId");
	kaitenTypesId	= НастройкиИзФайла.Получить("kaitenTypesId");
	
	kaitenUsersFields	= НастройкиИзФайла.Получить("kaitenUsersFields");
	
	redmineProjectId	= НастройкиИзФайла.Получить("redmineProjectId");
	redmineTrackersId	= НастройкиИзФайла.Получить("redmineTrackersId");
	redmineStatusId		= НастройкиИзФайла.Получить("redmineStatusId");
	redminePriority		= НастройкиИзФайла.Получить("redminePriority");
	redmineCategory		= НастройкиИзФайла.Получить("redmineCategory");
	redmineAssignedId	= НастройкиИзФайла.Получить("redmineAssignedId");
	redmineCustomFields	= НастройкиИзФайла.Получить("redmineCustomFields");
	
	kaitenTypesInRedmineTrackers = НастройкиИзФайла.Получить("kaitenTypesInRedmineTrackers");
	kaitenRedmineUsers = НастройкиИзФайла.Получить("kaitenRedmineUsers");
	
	redmineURL		= НастройкиИзФайла.Получить("redmineURL");
	Настройки.Вставить("redmineURL", redmineURL);
	redmineAPIKEY	= НастройкиИзФайла.Получить("redmineAPIKEY");
	
	createIssueUrl	= redmineURL + "issues.json";
	Настройки.Вставить("createIssueUrl", createIssueUrl);
	
	Возврат Настройки;
	
КонецФункции

Функция ПараметрыСоздания(Знач ПараметрыКоманднойСтроки)
	
	ПараметрыСоздания = Новый Структура();
	
	kaitenUrl = ПараметрыКоманднойСтроки["--kaitenUrl"];
	Если kaitenUrl = Неопределено Тогда
		ВызватьИсключение "Не задан параметр конфигурационного файла";
	Иначе
		ПараметрыСоздания.Вставить("kaitenUrl", kaitenUrl);
	КонецЕсли;
	
	Если ПараметрыКоманднойСтроки["--config"] = Неопределено Тогда
		ВызватьИсключение "Не задан параметр конфигурационного файла";
	Иначе
		НастройкиИзФайла = ПолучитьНастройкиИзФайла(ПараметрыКоманднойСтроки["--config"]);
		ПараметрыСоздания.Вставить("НастройкиИзФайла", НастройкиИзФайла);
	КонецЕсли;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция ПолучитьНастройкиИзФайла(Знач ПутьКФайлуJSON)
	
	Попытка
		ЧтениеТекста	= Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
		СтрокаJSON		= ЧтениеТекста.Прочитать();
		ПарсерJSON		= Новый ПарсерJSON();
		Параметры		= ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	Исключение
		Ошибка			= ОписаниеОшибки();
		ВызватьИсключение "Не удалось прочитать настройки из файла:" + Ошибка;
	КонецПопытки;
	
	Возврат Параметры;
	
КонецФункции

Функция kaitenCardId()
	
	urlData			 = КоннекторHTTP.РазобратьURL(kaitenUrl);
	ПутьНаСервере	 = urlData.Путь;
	МассивЧастейПути = СтрРазделить(ПутьНаСервере, "/", Ложь);
	cardId			 = МассивЧастейПути[МассивЧастейПути.ВГраница()];
	
	Возврат cardId;
	
КонецФункции

Функция ДанныеЗадачиKaiten() Экспорт
	
	ПараметрыЗапроса = Новый Структура();	
	ПараметрыЗапроса.Вставить("board_id", kaitenBoardId);
	
	// Предварительно получим список пользователей
	urlЗапроса			= "https://ekk2.kaiten.ru/api/latest/users";
	ДанныеПользователей	= ОтправитьЗапросВKaiten(urlЗапроса, "GET", ПараметрыЗапроса);
	kaitenUsersTable	= СформироватьТаблицуПользователей(ДанныеПользователей);
	ТаблицаСоответствияПользователей = СформироватьТаблицуСоответствияПользователей();
	redmineVersionsTable = СформироватьТаблицуВерсий();
	
	ШаблонЗапроса	= "https://%1.kaiten.ru/api/latest/cards/%2";
	cardId			= kaitenCardId();
	urlЗапроса		= СтрШаблон(ШаблонЗапроса, kaitenNameSpace, cardId);
	
	ДанныеЗадачи	= ОтправитьЗапросВKaiten(urlЗапроса, "GET", ПараметрыЗапроса);
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Процедура ДополнитьДанныеЗадачиKaiten(ДанныеЗадачи) Экспорт
	
	kaitenTypeId = ДанныеЗадачи.Получить("type_id");
	Если kaitenTypeId <> Неопределено Тогда
		tracker_id = kaitenTypesInRedmineTrackers.Получить(Строка(kaitenTypeId));
		ДанныеЗадачи.Вставить("tracker_id", tracker_id);
	КонецЕсли;
	
	Описание = ДанныеЗадачи.Получить("description");
	Если Описание <> Неопределено Тогда
		РазобратьОписаниеЗадачиKaiten(ДанныеЗадачи, Описание);
	КонецЕсли;
	
	// Обработка пользовательских полей, которые могут отсутствовать
	ПользовательскиеПоля = ДанныеЗадачи.Получить("properties");
	Если ПользовательскиеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКлючейПользователей = Новый Массив();
	МассивКлючейПользователей.Добавить("Разработчик");
	МассивКлючейПользователей.Добавить("Аналитик");
	
	МассивКлючейВерсий = Новый Массив();
	МассивКлючейВерсий.Добавить("ПлановыйРелиз");
	МассивКлючейВерсий.Добавить("ФактическийРелиз");
	
	Для Каждого КлючИЗначение Из kaitenUsersFields Цикл
		
		Если МассивКлючейПользователей.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиKaitenПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		ИначеЕсли МассивКлючейВерсий.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиKaitenВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		Иначе
			ПользовательскоеПоле = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
			Если ПользовательскоеПоле <> Неопределено Тогда
				ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ПользовательскоеПоле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиKaitenПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	МассивУИДПользователей = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если МассивУИДПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокПользователей = Новый Массив();
	Для Каждого УИД Из МассивУИДПользователей Цикл
		Отбор = Новый Структура("uid", УИД);
		ИскомыеСтроки = kaitenUsersTable.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда
			МассивСтрокПользователей.Добавить(ИскомыеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокПользователей.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, МассивСтрокПользователей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиKaitenВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	ТекущаяВерсия = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если ТекущаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсия	= "1.1." + ТекущаяВерсия; // Текущий формат ведения в kaiten отличается
	Отбор			= Новый Структура("name", ТекущаяВерсия);
	ИскомыеСтроки	= redmineVersionsTable.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ИскомыеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьОписаниеЗадачиKaiten(ДанныеЗадачи, Знач Описание)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить(1, Новый Структура("НовыйКлюч, Заголовок", "ФункциональныеТребования", "**Функциональные требования:**"));
	Заголовки.Вставить(2, Новый Структура("НовыйКлюч, Заголовок", "Объекты"					, "**Объект(-ы) системы в пользовательском режиме:**"));
	Заголовки.Вставить(3, Новый Структура("НовыйКлюч, Заголовок", "ТребованияРазработки"	, "**Требования к разработке:**"));
	Заголовки.Вставить(4, Новый Структура("НовыйКлюч, Заголовок", "УсловияОшибок"			, "**Условия выявления ошибок:**"));
	Заголовки.Вставить(5, Новый Структура("НовыйКлюч, Заголовок", "БДОшибки"				, "**БД выявленного замечания/ошибки:**"));
	Заголовки.Вставить(6, Новый Структура("НовыйКлюч, Заголовок", "Сценарий"				, "**Сценарий тестирования:**"));
	
	Разделитель	= "@@@";
	Описание	= СокрЛП(СтрЗаменить(Описание, Символы.ПС + Символы.ПС, Символы.ПС));
	Для Каждого КлючИЗначение Из Заголовки Цикл
		Описание = СтрЗаменить(Описание, КлючИЗначение.Значение.Заголовок, Разделитель);
	КонецЦикла;
	
	МассивБлоков = СтрРазделить(Описание, Разделитель, Ложь);
	Если МассивБлоков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	Для сч = 0 По МассивБлоков.Количество() - 1 Цикл
		
		ДанныеБлокаОписания = Заголовки.Получить(сч);
		Если ДанныеБлокаОписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОписания.Вставить(ДанныеБлокаОписания.НовыйКлюч, СокрЛП(МассивБлоков[сч]));
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураОписания Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуПользователей(ДанныеПользователей)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("full_name"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("email"		, Новый ОписаниеТипов("Строка"));
	
	Для Каждого Пользователь Из ДанныеПользователей Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НоваяСтрока[ИмяПоля] = Пользователь.Получить(ИмяПоля);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуСоответствияПользователей()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("redmineId"	, Новый ОписаниеТипов("Строка"));
	
	Для Каждого Пользователь Из kaitenRedmineUsers Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НоваяСтрока[ИмяПоля] = Пользователь.Получить(ИмяПоля);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуВерсий()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"			, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("name"			, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("description"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("status"		, Новый ОписаниеТипов("Строка"));
	
	ШаблонЗапроса	= "https://rm.rtinform.ru/projects/%1/versions.json";
	urlЗапроса		= СтрШаблон(ШаблонЗапроса, redmineProjectId);
	
	Ответ			= ОтправитьЗапросВRedmine(urlЗапроса, "GET");
	МассивВерсий	= Ответ.Получить("versions");
	
	Для Каждого Версия Из МассивВерсий Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НоваяСтрока[ИмяПоля] = Версия.Получить(ИмяПоля);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ОтправитьЗапросВKaiten(url, ТипЗапроса, ПараметрыЗапроса = Неопределено)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	Заголовки.Вставить("Authorization"	, "Bearer " + kaitenToken);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(url, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(url, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(url, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьЗапросВRedmine(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	ПараметрыЗапроса.Вставить("key", 	redmineAPIKEY);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type"		, "application/json");
	Заголовки.Вставить("Accept"				, "application/json");
	Заголовки.Вставить("X-Redmine-API-Key"	, redmineAPIKEY);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СформироватьОписаниеЗадачиRedmine(ДанныеЗадачи)
	
	ФункциональныеТребования	= ДанныеЗадачи.Получить("ФункциональныеТребования");
	ТребованияРазработки		= ДанныеЗадачи.Получить("ТребованияРазработки");
	
	Описание = "";
	Если ФункциональныеТребования <> Неопределено Тогда
		Описание = Описание + ФункциональныеТребования;
	КонецЕсли;
	Если ТребованияРазработки <> Неопределено Тогда
		Описание = Описание + Символы.ПС + ТребованияРазработки;
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция СформироватьПользовательскиеПоляRedmine(ДанныеЗадачи) Экспорт
	
	МассивПолей = Новый Массив();
	
	Для Каждого Поле Из redmineCustomFields Цикл
		
		id = Поле.Получить("id");
		name = Поле.Получить("name");
		value = Поле.Получить("value");
		
		Если name = "Сцен. тестир./воспр. ошибки" Тогда
			Сценарий = ДанныеЗадачи.Получить("Сценарий");
			Если Сценарий <> Неопределено Тогда
				value = Сценарий;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(value) = Тип("Массив") И value.Количество() = 0 Тогда
			// Определение пользователей для значения
			Если name = "Отв. Разработчик" Тогда
				МассивРазработчиковKaiten = ДанныеЗадачи.Получить("Разработчик");
				Если ТипЗнч(МассивРазработчиковKaiten) = Тип("Массив") И МассивРазработчиковKaiten.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", МассивРазработчиковKaiten[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
			Если name = "Отв. аналитик (подрядчик)" Тогда
				АналитикиKaiten = ДанныеЗадачи.Получить("Аналитик");
				Если  ТипЗнч(АналитикиKaiten) = Тип("Массив") И АналитикиKaiten.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", АналитикиKaiten[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДобавитьПользовательскоеПолеRedmine(МассивПолей, id, name, value);
		
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьПользовательскоеПолеRedmine(МассивПолей, id, name, value)
	
	СтруктураПоля = Новый Структура("id, name, value", id, name, value);
	МассивПолей.Добавить(СтруктураПоля);
	
КонецПроцедуры

Функция СформироватьДанныеЗадачи(ДанныеЗадачи) Экспорт
	
	// Creating an issue
	// POST /issues.[format]
	// Parameters:
	
	// issue - A hash of the issue attributes:
		// project_id
		// tracker_id
		// status_id
		// priority_id
		// subject
		// description
		// category_id
		// fixed_version_id - ID of the Target Versions (previously called 'Fixed Version' and still referred to as such in the API)
		// assigned_to_id - ID of the user to assign the issue to (currently no mechanism to assign by name)
		// parent_issue_id - ID of the parent issue
		// custom_fields - See Custom fields
		// watcher_user_ids - Array of user ids to add as watchers (since 2.3.0)
		// is_private - Use true or false to indicate whether the issue is private or not
		// estimated_hours - Number of hours estimated for issue
	
	description = СформироватьОписаниеЗадачиRedmine(ДанныеЗадачи);
	
	custom_fields = СформироватьПользовательскиеПоляRedmine(ДанныеЗадачи);
	
	ПараметрыЗапроса = Новый Структура();
	issue = Новый Структура();
	issue.Вставить("project_id"			, redmineProjectId);
	issue.Вставить("tracker_id"			, ДанныеЗадачи.Получить("tracker_id"));
	issue.Вставить("status_id"			, redmineStatusId);
	issue.Вставить("priority_id"		, redminePriority.Получить("Нормальный"));
	issue.Вставить("subject"			, ДанныеЗадачи.Получить("title"));
	issue.Вставить("description"		, description);
	issue.Вставить("category_id"		, redmineCategory.Получить("ЕКК2. ФИ (10.2. Кредиты)"));
	СтрокиВерсий = ДанныеЗадачи.Получить("ПлановыйРелиз");
	Если СтрокиВерсий <> Неопределено Тогда
		issue.Вставить("fixed_version_id"	, СтрокиВерсий.id);
	КонецЕсли;
	issue.Вставить("assigned_to_id"		, redmineAssignedId);
	//issue.Вставить("parent_issue_id"	, );
	issue.Вставить("custom_fields"		, custom_fields);
	//issue.Вставить("watcher_user_ids"	, );
	
	ПараметрыЗапроса.Вставить("issue", issue);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПроверитьСформированныеДанныеЗадачиRedmine(ДанныеЗадачиRedmine) Экспорт
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	МассивОшибок = Новый Массив();
	
	assigned_to_id = ДанныеЗадачиRedmine.issue.assigned_to_id;
	Если Не ЗначениеЗаполнено(assigned_to_id) Тогда
		МассивОшибок.Добавить("Не заполнено поле ""assigned_to_id"" (Назначена)");
	КонецЕсли;
	custom_fields = ДанныеЗадачиRedmine.issue.custom_fields;
	Если Не ЗначениеЗаполнено(custom_fields) Тогда
		МассивОшибок.Добавить("Не указаны пользовательские поля задачи");
	КонецЕсли;
	
	Для Каждого Поле Из custom_fields Цикл
		
		Если Поле.name = "Блоки" И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указаны блоки задачи");
		КонецЕсли;
		Если Поле.name = "ТА (подрядчик)" И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указан ""ТА (подрядчик)""");
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		РезультатПроверки.Результат = Ложь;
		РезультатПроверки.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции