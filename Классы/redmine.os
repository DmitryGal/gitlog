#Использовать 1connector
#Использовать json
#Использовать cmdline

#Область ОписаниеПеременных

// Параметры запуска
Перем АдресКайтен; // URL Кайтен
Перем АдресРедмайн; // Редмайн URL
Перем ТокенКайтен; // Токен Кайтен
Перем КлючРедмайн; // Редмайн API key
Перем НастройкиИзФайла; // Настройки из файла
Перем НастройкиИзФайлаПользователей; // Настройки из файла пользователей
Перем ИДЗадачиКайтенВх; // ИД задачи Кайтен из входных параметров

// Настройки из файла
Перем ИДКолонкиКайтен; // ID Колонки задач для выгрузки
Перем ПользовательскиеПоляКайтен; // Пользовательские поля Кайтен
Перем ИДПроектаРедмайн; // ИД проекта Редмайн
Перем ИДНовогоСтатусаРедмайн; // ИД нового статуса Редмайн
Перем ПриоритетРедмайнПоУмолчанию; // Приоритет Редмайн по-умолчанию
Перем СоответствиеТеговКайтенПриоритетамРедмайн; // Соответствие тегов Кайтен приоритетам Редмайн
Перем КатегорииРедмайн; // Категории Редмайн
Перем ИДПользователяРедмайнДляНазначения; // ИД пользователя Редмайн для назначения
Перем ПользовательскиеПоляРедмайн; // Пользовательские поля Редмайн
Перем СоответствиеТиповЗадачКайтенРедмайнТрекерам; // Соответствие типов задач Кайтен Редмайн трекерам
Перем АдресСозданияЗадачиРедмайн; // Адрес создания задачи Редмайн

// Настройки из файла пользователей
Перем ПользователиРедмайн; // Пользователи Редмайн
Перем СоответствиеПользователейКайтенИРедмайн; // Соответствие пользователей Кайтен и Редмайн

Перем ПользователиКайтен; // Таблица пользователей Кайтен
Перем ТаблицаВерсийРедмайн; // Таблица версий Редмайн
Перем ТаблицаСоответствияПользователей; // Таблица соответствия пользователей Кайтен и Редмайн

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализировать(Знач АргументыКоманднойСтроки) Экспорт
	
	ДобавитьВЛог("Инициализация настроек...");
	
	ПараметрыКоманднойСтроки = ИнициализироватьПарсер(АргументыКоманднойСтроки);
	ИнициализироватьПараметрыЗапуска(ПараметрыКоманднойСтроки);
	ИнициализироватьТаблицы();
	
	ДобавитьВЛог("Инициализация настроек завершена");
	
КонецПроцедуры

Процедура СоздатьЗадачиРедмайн() Экспорт
	
	Если ЗначениеЗаполнено(ИДЗадачиКайтенВх) Тогда
		
		ДобавитьВЛог("Включен режим отправки одной задачи", ИДЗадачиКайтенВх);
		ЗадачиКайтен = Новый Массив();
		ТекущаяЗадача = Новый Соответствие("id", ИДЗадачиКайтенВх);
		ЗадачиКайтен.Добавить(ТекущаяЗадача);
		
	Иначе
		
		ДобавитьВЛог("Получение задач Кайтен...");
		
		ЗадачиКайтен = ЗадачиКолонкиКайтен(ИДКолонкиКайтен);
		Если ЗадачиКайтен.Количество() = 0 Тогда
			ДобавитьВЛог("Нет задач Кайтен для обработки");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьВЛог("Обработка задач Кайтен...");
	
	Для Каждого ЗадачаКайтен Из ЗадачиКайтен Цикл
		
		ИДЗадачи = ЗадачаКайтен.Получить("id");
		ПолнаяЗадачаКайтен = ДанныеЗадачиКайтен(ИДЗадачи);
		ДополнитьДанныеЗадачиКайтен(ПолнаяЗадачаКайтен);
		
		НомерЗадачиРедмайн = ПолнаяЗадачаКайтен.Получить("НомерЗадачиРедмайн");
		Если НомерЗадачиРедмайн <> Неопределено Тогда
			ШаблонОшибки	= "Номер задачи Редмайн уже определен (%1)";
			ТекстОшибки		= СтрШаблон(ШаблонОшибки, НомерЗадачиРедмайн);
			ДобавитьВЛог(ТекстОшибки, ИДЗадачи);
			Продолжить;
		КонецЕсли;
		
		СоздатьЗадачуРедмайн(ПолнаяЗадачаКайтен);
		
	КонецЦикла;
	
	ДобавитьВЛог("Обработка задач Кайтен завершена.");
	
КонецПроцедуры

Функция ОтправитьЗапросВКайтен(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	Заголовки.Вставить("Authorization"	, "Bearer " + ТокенКайтен);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьЗапросВРедмайн(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"		, "application/json");
	Заголовки.Вставить("Accept"				, "application/json");
	Заголовки.Вставить("X-Redmine-API-Key"	, КлючРедмайн);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PUT" Тогда	
			Ответ = КоннекторHTTP.Put(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЗадачуРедмайн(ЗадачаКайтен)
	
	ИДЗадачиКайтен = ЗадачаКайтен.Получить("id");
	ДанныеЗадачиРедмайн = СформироватьДанныеЗадачи(ЗадачаКайтен);
	
	РезультатПроверки = ПроверитьСформированныеДанныеЗадачиРедмайн(ДанныеЗадачиРедмайн);
	Если РезультатПроверки.Результат = Ложь Тогда
		ТекстОшибки = СтрШаблон("Некорректно сформированы данные для запроса в Редмайн: %1", РезультатПроверки.ТекстОшибки);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен);
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = ОтправитьЗапросВРедмайн(АдресСозданияЗадачиРедмайн, "POST", ДанныеЗадачиРедмайн);
	ОшибкиСоздания = РезультатСоздания.Получить("errors");
	Если ОшибкиСоздания <> Неопределено Тогда
		ТекстОшибок = СтрСоединить(ОшибкиСоздания, Символы.ПС);
		ТекстОшибки = СтрШаблон("Выполнение http-запроса завершилось с ошибками:%1%2", Символы.ПС, ТекстОшибок);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен);	
		Возврат;
	КонецЕсли;
	ДанныеНовойЗадачи = РезультатСоздания.Получить("issue");
	ИДНовойЗадачи = Неопределено;
	Если ДанныеНовойЗадачи = Неопределено Тогда
		ТекстОшибки = "Непредвиденная ошибка, http-запрос выполнен, данные задачи Редмайн не получены!";
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен);	
		Возврат;
	Иначе
		ИДНовойЗадачи = ДанныеНовойЗадачи.Получить("id");
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон("Успешно создана задача по адресу %1/issues/%2", АдресРедмайн, ИДНовойЗадачи);
	ДобавитьВЛог(ТекстСообщения, ИДЗадачиКайтен);
	
	РезультатОбновленияЗадачиКайтен = ОтправитьНомерЗадачиРедмайнВКайтен(ИДЗадачиКайтен, ИДНовойЗадачи);
	РезультатПроверки = ПроверитьРезультатОбновленияНомераЗадачиРедмайнВКайтен(РезультатОбновленияЗадачиКайтен);
	Если РезультатПроверки.Результат = Ложь Тогда
		ТекстОшибки = СтрШаблон("Не удалось обновить номер задачи Редмайн в задаче Кайтен: %1", РезультатПроверки.ТекстОшибки);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен);
	Иначе
		ДобавитьВЛог("Номер задачи Редмайн обновлен", ИДЗадачиКайтен);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЗадачиКайтен(ИДЗадачиКайтен)
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2", АдресКайтен, ИДЗадачиКайтен);
	ДанныеЗадачи = ОтправитьЗапросВКайтен(АдресЗапроса, "GET");
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Процедура ДополнитьДанныеЗадачиКайтен(ДанныеЗадачи)
	
	ИДТипаКайтен = ДанныеЗадачи.Получить("type_id");
	Если ИДТипаКайтен <> Неопределено Тогда
		tracker_id = СоответствиеТиповЗадачКайтенРедмайнТрекерам.Получить(Строка(ИДТипаКайтен));
		Если tracker_id = 1 Тогда
			ДанныеЗадачи.Вставить("ЗаполнятьНайденоВ", Истина);
		КонецЕсли;
		ДанныеЗадачи.Вставить("tracker_id", tracker_id);
	КонецЕсли;
	
	Описание = ДанныеЗадачи.Получить("description");
	Если Описание <> Неопределено Тогда
		РазобратьОписаниеЗадачиКайтен(ДанныеЗадачи, Описание);
	КонецЕсли;
	
	ИДПриоритета	= ПриоритетРедмайнПоУмолчанию;
	Теги			= ДанныеЗадачи.Получить("tags");
	Для Каждого Тег Из Теги Цикл
		
		ИмяТега = Тег.Получить("name");
		Если ИмяТега = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПриоритета = СоответствиеТеговКайтенПриоритетамРедмайн.Получить(ИмяТега);
		Если СоответствиеПриоритета <> Неопределено Тогда
			ИДПриоритета = СоответствиеПриоритета;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	ДанныеЗадачи.Вставить("priority_id", ИДПриоритета);
	
	// Обработка пользовательских полей, которые могут отсутствовать
	ПользовательскиеПоля = ДанныеЗадачи.Получить("properties");
	Если ПользовательскиеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКлючейПользователей = Новый Массив();
	МассивКлючейПользователей.Добавить("Разработчик");
	МассивКлючейПользователей.Добавить("Аналитик");
	
	МассивКлючейВерсий = Новый Массив();
	МассивКлючейВерсий.Добавить("ПлановыйРелиз");
	МассивКлючейВерсий.Добавить("ФактическийРелиз");
	
	Для Каждого КлючИЗначение Из ПользовательскиеПоляКайтен Цикл
		
		Если МассивКлючейПользователей.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиКайтенПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		ИначеЕсли МассивКлючейВерсий.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиКайтенВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		Иначе
			ПользовательскоеПоле = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
			Если ПользовательскоеПоле <> Неопределено Тогда
				ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ПользовательскоеПоле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиКайтенПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	МассивУИДПользователей = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если МассивУИДПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокПользователей = Новый Массив();
	Для Каждого УИД Из МассивУИДПользователей Цикл
		Отбор = Новый Структура("uid", УИД);
		ИскомыеСтроки = ПользователиКайтен.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда
			МассивСтрокПользователей.Добавить(ИскомыеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокПользователей.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, МассивСтрокПользователей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиКайтенВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	ТекущаяВерсия = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если ТекущаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсия	= "1.1." + ТекущаяВерсия; // Текущий формат ведения в кайтен отличается
	Отбор			= Новый Структура("name", ТекущаяВерсия);
	ИскомыеСтроки	= ТаблицаВерсийРедмайн.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ИскомыеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьОписаниеЗадачиКайтен(ДанныеЗадачи, Знач Описание)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить(1, Новый Структура("НовыйКлюч, Заголовок", "ФункциональныеТребования", "**Функциональные требования:**"));
	Заголовки.Вставить(2, Новый Структура("НовыйКлюч, Заголовок", "Объекты"					, "**Объект(-ы) системы в пользовательском режиме:**"));
	Заголовки.Вставить(3, Новый Структура("НовыйКлюч, Заголовок", "ТребованияРазработки"	, "**Требования к разработке:**"));
	Заголовки.Вставить(4, Новый Структура("НовыйКлюч, Заголовок", "УсловияОшибок"			, "**Условия выявления ошибок:**"));
	Заголовки.Вставить(5, Новый Структура("НовыйКлюч, Заголовок", "БДОшибки"				, "**БД выявленного замечания/ошибки:**"));
	Заголовки.Вставить(6, Новый Структура("НовыйКлюч, Заголовок", "Сценарий"				, "**Сценарий тестирования:**"));
	
	Разделитель	= "^";
	Описание	= СокрЛП(СтрЗаменить(Описание, Символы.ПС + Символы.ПС, Символы.ПС));
	Для Каждого КлючИЗначение Из Заголовки Цикл
		Описание = СтрЗаменить(Описание, КлючИЗначение.Значение.Заголовок, Разделитель);
	КонецЦикла;
	
	МассивБлоков = СтрРазделить(Описание, Разделитель, Ложь);
	Если МассивБлоков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	Для сч = 0 По МассивБлоков.Количество() - 1 Цикл
		
		ДанныеБлокаОписания = Заголовки.Получить(сч);
		Если ДанныеБлокаОписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОписания.Вставить(ДанныеБлокаОписания.НовыйКлюч, СокрЛП(МассивБлоков[сч]));
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураОписания Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуПользователей(ДанныеПользователей)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("full_name"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("email"		, Новый ОписаниеТипов("Строка"));
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, ДанныеПользователей);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуСоответствияПользователей()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("redmineId"	, Новый ОписаниеТипов("Строка"));
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, СоответствиеПользователейКайтенИРедмайн);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуВерсий()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"			, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("name"			, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("description"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("status"		, Новый ОписаниеТипов("Строка"));
	
	ШаблонЗапроса	= "%1/projects/%2/versions.json";
	АдресЗапроса	= СтрШаблон(ШаблонЗапроса, АдресРедмайн, ИДПроектаРедмайн);
	
	Ответ			= ОтправитьЗапросВРедмайн(АдресЗапроса, "GET");
	МассивВерсий	= Ответ.Получить("versions");
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, МассивВерсий);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьОписаниеЗадачиРедмайн(ДанныеЗадачи)
	
	ФункциональныеТребования	= ДанныеЗадачи.Получить("ФункциональныеТребования");
	ТребованияРазработки		= ДанныеЗадачи.Получить("ТребованияРазработки");
	
	Описание = "";
	Если ФункциональныеТребования <> Неопределено Тогда
		Описание = Описание + ФункциональныеТребования;
	КонецЕсли;
	Если ТребованияРазработки <> Неопределено Тогда
		Описание = Описание + Символы.ПС + ТребованияРазработки;
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция СформироватьПользовательскиеПоляРедмайн(ДанныеЗадачи)
	
	МассивПолей = Новый Массив();
	
	Для Каждого Поле Из ПользовательскиеПоляРедмайн Цикл
		
		id = Поле.Получить("id");
		name = Поле.Получить("name");
		value = Поле.Получить("value");
		
		Если ДанныеЗадачи.Получить("ЗаполнятьНайденоВ") = Истина И name = "Найдено в" Тогда
			СтрокиВерсий = ДанныеЗадачи.Получить("ПлановыйРелиз");
			Если СтрокиВерсий <> Неопределено Тогда
				ПлановыйРелиз = СтрокиВерсий.name;
				МассивЧисел = СтрРазделить(ПлановыйРелиз, ".", Ложь);
				ПоследнийИндекс = МассивЧисел.Количество() - 1;
				ПоследнееЧисло = Число(МассивЧисел[ПоследнийИндекс]);
				Если ПоследнееЧисло = 1 Тогда
					МассивЧисел[ПоследнийИндекс - 1] = Строка(Число(МассивЧисел[ПоследнийИндекс - 1]) - 1);
				Иначе
					МассивЧисел[ПоследнийИндекс] = Строка(Число(МассивЧисел[ПоследнийИндекс]) - 1);
				КонецЕсли;
				versionName = СтрСоединить(МассивЧисел, ".");
				Отбор = Новый Структура("Name", versionName);
				ИскомыеВерсии = ТаблицаВерсийРедмайн.НайтиСтроки(Отбор);
				Если ИскомыеВерсии.Количество() > 0 Тогда
					value = ИскомыеВерсии[0].id;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если name = "Сцен. тестир./воспр. ошибки" Тогда
			Сценарий = ДанныеЗадачи.Получить("Сценарий");
			Если Сценарий <> Неопределено Тогда
				value = Сценарий;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(value) = Тип("Массив") И value.Количество() = 0 Тогда
			// Определение пользователей для значения
			Если name = "Отв. Разработчик" Тогда
				МассивРазработчиковКайтен = ДанныеЗадачи.Получить("Разработчик");
				Если ТипЗнч(МассивРазработчиковКайтен) = Тип("Массив") И МассивРазработчиковКайтен.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", МассивРазработчиковКайтен[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
			Если name = "Отв. аналитик (подрядчик)" Тогда
				АналитикиКайтен = ДанныеЗадачи.Получить("Аналитик");
				Если  ТипЗнч(АналитикиКайтен) = Тип("Массив") И АналитикиКайтен.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", АналитикиКайтен[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДобавитьПользовательскоеПолеРедмайн(МассивПолей, value, id);
		
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьПользовательскоеПолеРедмайн(МассивПолей, value, id)
	
	СтруктураПоля = Новый Структура("value, id", value, id);
	МассивПолей.Добавить(СтруктураПоля);
	
КонецПроцедуры

Функция СформироватьДанныеЗадачи(ДанныеЗадачи)
	
	// Creating an issue
	// POST /issues.[format]
	// Parameters:
	
	// issue - A hash of the issue attributes:
		// project_id
		// tracker_id
		// status_id
		// priority_id
		// subject
		// description
		// category_id
		// fixed_version_id - ID of the Target Versions (previously called 'Fixed Version' and still referred to as such in the API)
		// assigned_to_id - ID of the user to assign the issue to (currently no mechanism to assign by name)
		// parent_issue_id - ID of the parent issue
		// custom_fields - See Custom fields
		// watcher_user_ids - Array of user ids to add as watchers (since 2.3.0)
		// is_private - Use true or false to indicate whether the issue is private or not
		// estimated_hours - Number of hours estimated for issue
	
	description = СформироватьОписаниеЗадачиРедмайн(ДанныеЗадачи);
	
	custom_fields = СформироватьПользовательскиеПоляРедмайн(ДанныеЗадачи);
	
	ПараметрыЗапроса = Новый Структура();
	issue = Новый Структура();
	issue.Вставить("project_id"	, ИДПроектаРедмайн);
	issue.Вставить("tracker_id"	, ДанныеЗадачи.Получить("tracker_id"));
	issue.Вставить("status_id"	, ИДНовогоСтатусаРедмайн);
	issue.Вставить("priority_id", ДанныеЗадачи.Получить("priority_id"));
	ЗаголовокЗадачиКайтен = ДанныеЗадачи.Получить("title");
	Если ЗаголовокЗадачиКайтен <> Неопределено Тогда
		ПозицияНомераНавигатора = СтрНайти(ЗаголовокЗадачиКайтен, "]");
		Если ПозицияНомераНавигатора > 0 Тогда
			ЗаголовокЗадачиКайтен = СокрЛП(Сред(ЗаголовокЗадачиКайтен, ПозицияНомераНавигатора + 1, СтрДлина(ЗаголовокЗадачиКайтен)));
		КонецЕсли;
	Иначе
		ЗаголовокЗадачиКайтен = ДанныеЗадачи.Получить("id");
	КонецЕсли;
	issue.Вставить("subject"			, ЗаголовокЗадачиКайтен);
	issue.Вставить("description"		, description);
	issue.Вставить("category_id"		, КатегорииРедмайн.Получить("ЕКК2. ФИ (10.2. Кредиты)"));
	СтрокиВерсий = ДанныеЗадачи.Получить("ПлановыйРелиз");
	Если СтрокиВерсий <> Неопределено Тогда
		issue.Вставить("fixed_version_id"	, СтрокиВерсий.id);
	КонецЕсли;
	issue.Вставить("assigned_to_id"		, ИДПользователяРедмайнДляНазначения);
	//issue.Вставить("parent_issue_id"	, );
	issue.Вставить("custom_fields"		, custom_fields);
	//issue.Вставить("watcher_user_ids"	, );
	
	ПараметрыЗапроса.Вставить("issue", issue);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПроверитьСформированныеДанныеЗадачиРедмайн(ДанныеЗадачиРедмайн)
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	МассивОшибок = Новый Массив();
	
	description = ДанныеЗадачиРедмайн.issue.description;
	Если Не ЗначениеЗаполнено(description) Тогда
		МассивОшибок.Добавить("Не заполнено поле ""description"" (Описание)");
	КонецЕсли;
	assigned_to_id = ДанныеЗадачиРедмайн.issue.assigned_to_id;
	Если Не ЗначениеЗаполнено(assigned_to_id) Тогда
		МассивОшибок.Добавить("Не заполнено поле ""assigned_to_id"" (Назначена)");
	КонецЕсли;
	custom_fields = ДанныеЗадачиРедмайн.issue.custom_fields;
	Если Не ЗначениеЗаполнено(custom_fields) Тогда
		МассивОшибок.Добавить("Не указаны пользовательские поля задачи");
	КонецЕсли;
	
	Для Каждого Поле Из custom_fields Цикл
		
		Если Поле.id = 3 И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указаны блоки задачи");
		КонецЕсли;
		Если Поле.id = 7 И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указан ""ТА (подрядчик)""");
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		РезультатПроверки.Результат = Ложь;
		РезультатПроверки.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОтправитьНомерЗадачиРедмайнВКайтен(ИДЗадачиКайтен, ИДЗадачиРедмайн)
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2", АдресКайтен, ИДЗадачиКайтен);
	
	ИДНомера = ПользовательскиеПоляКайтен.Получить("НомерЗадачиРедмайн");
	Если ИДНомера = Неопределено Тогда
		ДобавитьВЛог("Не удалось определить id пользовательского поля кайтен 'Номер задачи Редмайн'", ИДЗадачиКайтен);
		Возврат Неопределено;
	КонецЕсли;
	
	ПользовательскиеПоля = Новый Структура();
	ПользовательскиеПоля.Вставить(ИДНомера, ИДЗадачиРедмайн);
	
	ПараметрыЗапроса = Новый Структура("properties", ПользовательскиеПоля);
	Ответ			 = ОтправитьЗапросВКайтен(АдресЗапроса, "PATCH", ПараметрыЗапроса);
	
	Возврат Ответ;
	
КонецФункции

Функция ПроверитьРезультатОбновленияНомераЗадачиРедмайнВКайтен(РезультатОбновления)
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	properties = РезультатОбновления.Получить("properties");
	Если properties = Неопределено Тогда
		РезультатПроверки.Результат = Ложь;
		РезультатПроверки.ТекстОшибки = НСтр("ru ='Не удалось получить пользовательские поля Кайтен'");
	Иначе
		ИДНомера = ПользовательскиеПоляКайтен.Получить("НомерЗадачиРедмайн"); // Ранее проверялся
		НомерЗадачиРедмайн = properties.Получить(ИДНомера);
		Если НомерЗадачиРедмайн = Неопределено Тогда
			РезультатПроверки.Результат = Ложь;
			РезультатПроверки.ТекстОшибки = НСтр("ru ='Не удалось получить номер задачи Редмайн'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЗадачиКолонкиКайтен(ИДКолонки, Знач Лимит = 100, НачатьС = 0)
	
	ДанныеЗадач = Новый Массив();
	
	ПараметрыЗапроса = Новый Структура();	
	ПараметрыЗапроса.Вставить("column_ids"	, ИДКолонки);
	ПараметрыЗапроса.Вставить("archived"	, "false");
	ПараметрыЗапроса.Вставить("limit"		, Лимит);
	
	ВыполнятьЗапрос = Истина;
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards", АдресКайтен);
	
	Пока ВыполнятьЗапрос = Истина Цикл
		ПараметрыЗапроса.Вставить("offset", НачатьС);
		ПорцияЗадач = ОтправитьЗапросВКайтен(АдресЗапроса, "GET", ПараметрыЗапроса);
		Для Каждого ДанныеЗадачи Из ПорцияЗадач Цикл
			ДанныеЗадач.Добавить(ДанныеЗадачи);
		КонецЦикла;
		ВыполнятьЗапрос	= ПорцияЗадач.Количество() > 0;
		НачатьС			= НачатьС + Лимит;
	КонецЦикла;
	
	ДобавитьВЛог("Получено задач Кайтен - " + ДанныеЗадач.Количество());
	
	Возврат ДанныеЗадач;
	
КонецФункции

#Область ОбщиеМетоды

Функция ПрочитатьФайлJSON(Знач ПутьКФайлуJSON)
	
	Попытка
		ЧтениеТекста	= Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
		СтрокаJSON		= ЧтениеТекста.Прочитать();
		ПарсерJSON		= Новый ПарсерJSON();
		Параметры		= ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	Исключение
		Ошибка			= ОписаниеОшибки();
		ВызватьИсключение "Не удалось прочитать настройки из файла:" + Ошибка;
	КонецПопытки;
	
	Возврат Параметры;
	
КонецФункции

Процедура ДобавитьВЛог(Текст, ИДЗадачи = Неопределено)
	
	Если ИДЗадачи <> Неопределено Тогда
		ШаблонСообщения	= "Задача [%1%2]: %3";
		ТекстСообщения	= СтрШаблон(ШаблонСообщения, АдресКайтен, ИДЗадачи, Текст);
	Иначе
		ТекстСообщения	= Текст;
	КонецЕсли;
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

Процедура ДобавитьСтрокиТЗПоСоответствию(ТЗ, МассивСоответствий)
	
	Для Каждого СоответствиеЗначений Из МассивСоответствий Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = СоответствиеЗначений.Получить(Колонка.Имя);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

Функция ИнициализироватьПарсер(АргументыКоманднойСтроки)
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьИменованныйПараметр("--kaitenURL"	, "URL Кайтен");
	Парсер.ДобавитьИменованныйПараметр("--redmineURL"	, "URL Редмайн");
	Парсер.ДобавитьИменованныйПараметр("--kaitenToken"	, "Токен Кайтен");
	Парсер.ДобавитьИменованныйПараметр("--redmineAPIKEY", "API ключ Редмайн");
	Парсер.ДобавитьИменованныйПараметр("--config"		, "Путь к файлу настроек");
	Парсер.ДобавитьИменованныйПараметр("--redmineUsers"	, "Путь к файлу пользователей redmine");
	Парсер.ДобавитьИменованныйПараметр("--idCard"		, "ИД задачи Кайтен");
	
	ПараметрыКоманднойСтроки = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	Возврат ПараметрыКоманднойСтроки;
	
КонецФункции

Процедура ИнициализироватьПараметрыЗапуска(Знач ПараметрыКоманднойСтроки)
	
	АдресКайтен					= ПараметрыКоманднойСтроки["--kaitenURL"];
	АдресРедмайн				= ПараметрыКоманднойСтроки["--redmineURL"];
	ТокенКайтен					= ПараметрыКоманднойСтроки["--kaitenToken"];
	КлючРедмайн					= ПараметрыКоманднойСтроки["--redmineAPIKEY"];
	ПутьНастроек				= ПараметрыКоманднойСтроки["--config"];
	ПутьНастроекПользователей	= ПараметрыКоманднойСтроки["--redmineUsers"];
	ИДЗадачиКайтенВх			= ПараметрыКоманднойСтроки["--idCard"];
	
	НастройкиИзФайла				= ПрочитатьФайлJSON(ПутьНастроек);
	НастройкиИзФайлаПользователей	= ПрочитатьФайлJSON(ПутьНастроекПользователей);
	
	МассивОбязательныхПараметров = Новый Массив();
	МассивОбязательныхПараметров.Добавить(АдресКайтен);
	МассивОбязательныхПараметров.Добавить(АдресРедмайн);
	МассивОбязательныхПараметров.Добавить(ТокенКайтен);
	МассивОбязательныхПараметров.Добавить(КлючРедмайн);
	МассивОбязательныхПараметров.Добавить(НастройкиИзФайла);
	МассивОбязательныхПараметров.Добавить(НастройкиИзФайлаПользователей);
	
	Для Каждого Параметр Из МассивОбязательныхПараметров Цикл
		Если Не ЗначениеЗаполнено(Параметр) Тогда
			ВызватьИсключение "Не заполнены обязательные параметры запуска!";
		КонецЕсли;
	КонецЦикла;
	
	ИнициализироватьНастройкиИзФайла();
	ИнициализироватьНастройкиИзФайлаПользователей();
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиИзФайла()
	
	ИДКолонкиКайтен = НастройкиИзФайла.Получить("ИДКолонкиКайтен");
	ПользовательскиеПоляКайтен = НастройкиИзФайла.Получить("ПользовательскиеПоляКайтен");
	ИДПроектаРедмайн = НастройкиИзФайла.Получить("ИДПроектаРедмайн");
	ИДНовогоСтатусаРедмайн = НастройкиИзФайла.Получить("ИДНовогоСтатусаРедмайн");
	ПриоритетРедмайнПоУмолчанию = НастройкиИзФайла.Получить("ПриоритетРедмайнПоУмолчанию");
	СоответствиеТеговКайтенПриоритетамРедмайн = НастройкиИзФайла.Получить("СоответствиеТеговКайтенПриоритетамРедмайн");
	КатегорииРедмайн = НастройкиИзФайла.Получить("КатегорииРедмайн");
	ИДПользователяРедмайнДляНазначения = НастройкиИзФайла.Получить("ИДПользователяРедмайнДляНазначения");
	ПользовательскиеПоляРедмайн = НастройкиИзФайла.Получить("ПользовательскиеПоляРедмайн");
	СоответствиеТиповЗадачКайтенРедмайнТрекерам	= НастройкиИзФайла.Получить("СоответствиеТиповЗадачКайтенРедмайнТрекерам");
	АдресСозданияЗадачиРедмайн	= СтрШаблон("%1/issues.json", АдресРедмайн);
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиИзФайлаПользователей()
	
	ПользователиРедмайн = НастройкиИзФайлаПользователей.Получить("ПользователиРедмайн");
	СоответствиеПользователейКайтенИРедмайн = НастройкиИзФайлаПользователей.Получить("СоответствиеПользователейКайтенИРедмайн");
	
КонецПроцедуры

Процедура ИнициализироватьТаблицы()
	
	АдресЗапроса = СтрШаблон("%1/api/latest/users", АдресКайтен);
	ДанныеПользователей = ОтправитьЗапросВКайтен(АдресЗапроса, "GET");
	ПользователиКайтен = СформироватьТаблицуПользователей(ДанныеПользователей);
	
	ТаблицаСоответствияПользователей = СформироватьТаблицуСоответствияПользователей();
	
	ТаблицаВерсийРедмайн = СформироватьТаблицуВерсий();
	
КонецПроцедуры

#КонецОбласти